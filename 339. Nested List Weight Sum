/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        int result = 0;
        Queue<NestedInteger> q = new LinkedList<NestedInteger>();
        Queue<Integer> depth = new LinkedList<Integer>();
        for (NestedInteger i : nestedList) {
            q.offer(i);
            depth.offer(1);
            while (!q.isEmpty()) {
                NestedInteger top = q.poll();
                int dep = depth.poll();
                if (top.isInteger()) {
                    result += top.getInteger() * dep;
                }
                else {
                    for (NestedInteger el : top.getList()) {
                        q.offer(el);
                        depth.offer(dep + 1);
                    }
                }
            }
        }
        return result;
    }
}
