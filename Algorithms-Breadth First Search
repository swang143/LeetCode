101. Symmetric Tree
Steps:
(1) See if the tree is null
(2) Initiate a queue(FIFO), push left child and right child into the queue
(3) While queue is not empty (We still have nodes that are going to be compared), pop up the first two nodes
    4 conditions here:
      (1) Both are null                                             -- Continue
      (2) One null and one not null                                 -- Return false
      (3) Both NOT null -- Their values are not the same            -- Return false
                        -- Their values are the same                -- Go to Step (4)

(4) ORDER MATTERS
    queue.offer(left.left);
    queue.offer(right.right);
    queue.offer(left.right);
    queue.offer(right.left);
    
    In the same level, always push nth from the front and nth from the back into the queue at the same time.
    

103. Binary Tree Zigzag Level Order Traversal
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3                    level 1
   / \
  9  20                  level 2
    /  \
   15   7                level 3
  /  \  /\
 1    2 3 4
[
  [3],
  [20,9],
  [15,7]
]

Algorithm:
1. Two stacks, stack1 for even levels, stack2 for odd levels
2. push level2 nodes into stack1 from LEFT to RIGHT (EVEN Level)
3. while stack1 or stack 2 is not empty
4.    For Even Level(nodes stored in stack 1)
         if current node is not empty, push its cihldren into stack2 from RIGHT to LEFT(ODD Level)
         New ArrayList to store node.val for even level
5.    For Odd Level (nodes stored in stack 2)
         if current node is not empty, push its children into stack2 from LEFT to RIGHT(EVEN Level)
         New ArrayList to store node.val for odd level

You can simplify further:
Push root into stack2, Then go into while loop

My Thought Flow:
First consider using QUEUE and STACK for each adjacent level, because adjacent level has opposite order, 
from right to left, then from left to right

The Problem is:
1. If Push Level 2 Nodes into Stack from LEFT to RIGHT, then Node 20 will come out first, and when you push its children,
   If you push level 3 nodes into queue, it's wrong
   If you push level 3 nodes into stack from right to left, then level 3 is okay, let's examine level 4, also okay
   Use Stack Only
   
2. If Push Level 2 Nodes into Queue from RIGHT to LEFT, again, the Node 20 will come out first, when pushing its children,
   To make sure Level 3 Nodes from LEFT to RIGHT, have to use stack, and push from right child to left child;
   Then In your stack, you have | 15|   for level 3
                                |---|
                                | 7 |
                               
   For level 4, the order is from RIGHT to LEFT, Again you have to use stack to place level 4 nodes, children of level 3
   
So, in one word, no matter what you use for level 2, you have to use stacks for following levels, 
Therefore, use stacks for consistency. 
Use stack1 for even levels, stack2 for odd levels. 


301. Remove Invalid Parentheses
Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Examples:
"()())()" -> ["()()()", "(())()"]
"(a)())()" -> ["(a)()()", "(a())()"]
")(" -> [""]

ENUMERATION, loops over all possible conditions before deleting certain numbers of '(' / ')'
NOTICE that: It is possible that you may need to delete more than 1 '('/')'. If you are deleting the nth '('/')', it must come from the
string that you have deleted (n-1) '('/')'s. Therefore, we can create a queue to store all the strings, while queue is not empty, poll 
out a string each time, decide if it's a valid string, if yes, stop deleting more '('/')'.

Algorithm:
1. offer string into queue,
2. while queue is not empty, 
   (1) poll head of queue
   (2) judge if current string is valid or not
   (3) if it is valid, stop deleting from current string and other strings in queue
   (4) if it is not valid, deleting one more ( or ) from current string
             if no other such string has appeared, save it
             (push it into queue and visied hash table)
3. Finish looping, return result.


317. Shortest Distance from All Buildings
You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.

Algorithm:
Tranverse the grid array, every time we find a building(1), we calculate all empty spaces(0)'s distance from this building.
Then how to calculate the distance?
We need visited array to save the points that have already been visited,
        int level to indicate current distance from building,
        a queue to save all empty spaces at current level.
        int queue size to indicate # of empty spaces at current level.

Details:
1. for (int i = 0: i < row; i++) {
        for (int j = 0; j < col; j++) {  // looping all points in grid
            if (grid[i][j] = 1) {        // finding all buildings
                 // start calculating distance
                 Queue<int[]> queue = new LinkedList<>();  // initialize queue
                 queue.offer(new int[]{i, j});
                 buildingNum++;
                 
                 int[][] visited = new int[row][col];  //initialize visited array
                 int level = 1;                        //initialize level
                 while (!queue.isEmpty()) {
                   
                    int size = queue.size();
                    for (int m = 0; m < size; m++) {
                        int[] current = queue.poll();
                        for (int j = 0; j < 4; j++) { 
                            // find unvisited empty space around current point (4 directions, up, down, left, right)
                            if (nextX >= 0 && nextX < row && nextY >=0 && nextY < row && unvisited && nextPoint is Empty Space) {
                                distance[nextX][nextY] += level;
                                reach[nextX][nextY] == true;
                            }
                        }                   
                    }
                    level++;
                 }
            }
        }
   }
   
 2. For every empty space, if it can reach all buildings, then find the minimum distance among these points. And return min.
    Empty Space --> grid[][] == 0
    Reach all buildings --> reach[][] == true
    Find minimum --> loop all spaces in distance[][]


417. Pacific Atlantic Water Flow
Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:
The order of returned grid coordinates does not matter.
Both m and n are less than 150.

Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).

NOTE: If for every point in matrix, check if it can go to either Pacific or Atlantic, OJ will throw on Stack Over Flow error. Can not
pass OJ. Therefore change mind, focus all points at the edges, and see which points can get assess to them, two boolean visited matrix.

BELOW ARE MY FIRST TRIAL, WHICH THROWS STACK OVER FLOW ERROR.
public class Solution {
    public List<int[]> pacificAtlantic(int[][] matrix) {
        if (matrix == null || matrix[0].length == 0) return null;
        
        List<int[]> result = new ArrayList<>();
        
        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] reachP = new boolean[m][n];
        boolean[][] reachA = new boolean[m][n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == 0 && j == n) || (i == m && j == 0)) continue;
                dfs(i, j, i, j, matrix, reachP, reachA);
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (reachP[i][j] && reachA[i][j]) 
                    result.add(new int[]{i, j});
            }
        }
        
        return result;
    }
    
    private void dfs(int i, int j, int var1, int var2, int[][] matrix, boolean[][] reachP, boolean[][] reachA) {
        if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length) return;
        
        if ((var1 == 0 || var2 == 0) && (var1 == matrix.length || var2 == matrix[0].length)) {
            reachP[i][j] = true;
            reachA[i][j] = true;
            return;
        }
        
        else if (var1 == matrix.length || var2 == matrix[0].length) {
            reachA[i][j] = true;
            return;
        }
        else if (var1 == 0 || var2 == 0) {
            reachP[i][j] = true;
            return;
        }
        
        if (matrix[i][j] >= matrix[i - 1][j]) dfs(i, j, var1 - 1, var2, matrix, reachP, reachA);
        if (matrix[i][j] >= matrix[i + 1][j]) dfs(i, j, var1 + 1, var2, matrix, reachP, reachA);
        if (matrix[i][j] >= matrix[i][j + 1]) dfs(i, j, var1, var2 + 1, matrix, reachP, reachA);
        if (matrix[i][j] >= matrix[i][j - 1]) dfs(i, j, var1, var2 - 1, matrix, reachP, reachA);
    }
}

Algorithm:
Since to loop over each point and find if they have access to oceans will throw a stack over flow exception,
We focus on the edge points instead to see if we can step on any point from the edge.
DFS, two visited array to record the accessibility for each ocean.

for (int i = 0; i < m; i++) { // Loop over two VERTICAL edges
    dfs(i, 0, pVisited);
    dfs(i, n - 1, aVisited);
}

for (int j = 0; j < n; j++) {  // Loop over two HORIZONTAL edges
    dfs(o, j, pVisited);
    dfs(m - 1, j, aVisited); 
}

void dfs(i, j, boolean[][], int[][]) {
    visited[i][j] = true;   // set current point to be visited;
    for (int i = 0; i < 4; i++) {// go to 4 directions from current point (up, down, left, right)
        if (new point still in matrix && unvisited && matrix[new point] > matrix[current point]) {
            dfs(new point);
        }
}












