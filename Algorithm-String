12. Integer to Roman
String[] romans = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};  
NOTE 
1. 900, 400, 90, 40, 9, 4 ARE SPECIAL NUMBERS that are using special representation methods. 
2. For a certain number, compare it with the values array, which has those nodes from large to smaller in decreasing order

151. Reverse Words in a String
spilit by space
s.split(" ")
s.equals() to compare string, != won't work


14. Longest Common Prefix
Write a function to find the longest common prefix string amongst an array of strings.
For example:
{"a","a","b"} should give "" as there is nothing common in all the 3 strings.

{"a", "a"} should give "a" as a is longest common prefix in all the strings.

{"abca", "abc"} as abc

{"ac", "ac", "a", "a"} as a.

My thought:
Take a Character each time, and compare among all strings in array.

Top in Submission:
Take the first string in array
loop over all strings in array
    if (current string doesn't include the first string as prefix)
        then decrease 1 char at the end by using substring method until current string has the prefix;
    go to next string;
   
My thought is keep increasing
While we can also keep decreasing(This might be more efficient)
        

20. Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

Stack:
Loop over all characters within string:
if (current char == '(')       push ')' into stack

if (current char == '{')        push '}' into stack

if (current char == '[')        push ']' into stack

else current char is among one of the ')', '}', ']',
if stack is empty, return false;
if pop up top element and it is not equal to current char, return false;

After finish looping all characters within string, check if stack is empty, if not return false; else return true;
