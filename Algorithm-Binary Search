33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.

Novel Solution:
Transform rotation back to original ascending ordered array

class Solution {
public:
    int search(int A[], int n, int target) {
        int lo=0,hi=n-1;
        // find the index of the smallest value using binary search.
        // Loop will terminate since mid < hi, and lo or hi will shrink by at least 1.
        // Proof by contradiction that mid < hi: if mid==hi, then lo==hi and loop would have been terminated.
        while(lo<hi){
            int mid=(lo+hi)/2;
            if(A[mid]>A[hi]) lo=mid+1;
            else hi=mid;
        }
        // lo==hi is the index of the smallest value and also the number of places rotated.
        int rot=lo;
        lo=0;hi=n-1;
        // The usual binary search and accounting for rotation.
        while(lo<=hi){
            int mid=(lo+hi)/2;
            int realmid=(mid+rot)%n;
            if(A[realmid]==target)return realmid;
            if(A[realmid]<target)lo=mid+1;
            else hi=mid-1;
        }
        return -1;
    }
};


154. Find Minimum in Rotated Sorted Array II
Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.
The array may contain duplicates.

NOTE:
The most important thing is to compare mid and rightmost value in the array.


240. Search a 2D Matrix II
My thought:
While (not exceeds row limit) {
    if (target in the range of current row) {
        // binary search to find target
        if (found) return true;
        if (not found) continue;
    }
    else if (target < first element of current row) {
        return false;
    }
    // Other condition if (target > last element of current row) then go to next line;
    // Don't need to write out this contion 
}
return false;
// If target not found after loop exiting, then return false;

Example thought:
THE MOST IMPORTANT POINT IS WHERE HE STARTS
We start search the matrix from top right corner, initialize the current position to top right corner, 
(1) if the target is greater than the value in current position, then the target can not be in entire row of current position 
because the row is sorted, 

(2) if the target is less than the value in current position, then the target can not in the entire column 
because the column is sorted too. 

We can rule out one row or one column each time, so the time complexity is O(m+n).


74. Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]

My Answer:
Follow the thought of 240 Example thought:
Start from top right corner:
While (row < upper limit && col >= 0) {
    if (target == element @ current location) 
        return true;
    if (target < element @ current location)
        col--;
    if (target > element @ current location)
        row++;
}
return false;

Example Thought:
Use binary search.

n * m matrix CONVERT TO ARRAY => matrix[x][y] => a[x * m + y]
an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];

class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int l = 0, r = m * n - 1;
        while (l != r){
            int mid = (l + r - 1) >> 1;
            if (matrix[mid / m][mid % m] < target)
                l = mid + 1;
            else 
                r = mid;
        }
        return matrix[r / m][r % m] == target;
    }
};
