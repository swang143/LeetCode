116. Populating Next Right Pointers in Each Node

Note:

You may only use constant extra space.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).

         1                    
       /  \
      2    3
     / \  / \
    4  5  6  7     
    
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL
    
Algorithm:
leftEnd -> leftmost node within each level
current -> loop through all nodes in current level

while (leftEnd is not leaf) {
    current = leftEnd;    // reset current at the beginning of each loop;
    while (current node is not null) {
        current.left.next = current.right;
        current.right.next: depending on whether current.next is null or not;
        current = current.next;
    }
    // current level finishes
    // go to next level
    leftEnd = leftEnd.left;
}
// reach leaf, exit loop


257. Binary Tree Paths
Inout:
    1
  /   \
 2     3
  \
   5
  
Return:
["1->2->5", "1->3"]

Algorithm:
bottom up
if (root == null) 
    return [];
if (root is leaf);
    return ["root.val"];
for (each string in left children paths) {
    add to current paths;
}
for (each string in right children paths) {
    add to current paths;
}
return path;


114. Flatten Binary Tree to Linked List
         1
        / \
       2   5
      / \   \
     3   4   6
     
Result:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
Algorithm:
1. Use an ArrayList to save preOrder transverse of binary tree using Recursive method
2. For every node in arrayList, left child is null, right child is the next node in arrayList
3. For the last node, both its left child and right child are null (Leaf node)


199. Binary Tree Right Side View
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
Return: [1, 3, 4].
Optimized Algorithm:
Every level will only have one node to be seen, and that is the rightmost node that is not null.
Therefore the question is just find the rightmost not null node in every level.

if (right children is not null and no other node has been inserted in current level)
    then add into list;
if (right children is null) 
    then check the left children; 


111. Minimum Depth of Binary Tree
Note: for node that has only 1 child, the other child is null. This kind of nodes are not a leaf, therefore distance from root to them\
can be counted. Should eliminate this condition.

The logic of the helper method:
if (root == null) return Integer.MAX_VALUE;
if (root is a leaf) return 1;
return 1 + Math.min(helper(root.left), helper(root.right)); // recursive process

Error example:  if you don't eliminate the case of nodes that has 1 null child, you'll get following error.
Input:
[1,2]
Output:
1
Expected:
2


98. Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

My Solution:
Logic:
For every node, find the largest value in its left subtree
                find the smallest value in its right subtree
if (MaxValue_left_subtree >= current_node) return false;
if (MinValue_right_subtree <= current_node) return false;

return helper(root.left) && helper(root.right);

(recursive)

The way that finds the largest value in left subtree is:
  rightmost leaf of left child

Find the smallest value in right subtree is:
  leftmost left of right child

Code:
public boolean isValidBST(TreeNode root) {
        if (root == null) return true;
        
        //find the largest value in the left subtree
        TreeNode left = root.left;
        if (left!= null) {
            while(left.right != null) {
                left = left.right;
            }
            if (left.val >= root.val)
                return false;
        }
        
        TreeNode right = root.right;
        if (right != null) {
            while (right.left != null) {
                right = right.left;
            }
            if (right.val <= root.val)
                return false;
        }
        return isValidBST(root.left) && isValidBST(root.right);
    }
    
Optimized Solution:
helper(node, low, up)   -> set min and max limit for node; if exceeds the limit, return false
return helper(root.left, low, root.val) 
    && helper(root.right, root.val, up);
